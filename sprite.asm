.data

bitmap_begin: .word 0xFF000000
standing: .byte 0x1B, 0x1B, 0x1B, 0x1B, 0xC8, 0xC8, 0xC8, 0xC8,
				0x5B, 0x5B, 0x5B, 0x5B, 0xC8, 0xC8, 0xC8, 0xC8,
				0x5B, 0x5B, 0x5B, 0x5B, 0xC8, 0xC8, 0xC8, 0xC8,
				0x5B, 0x5B, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8,
				0x6B, 0x6B, 0x6B, 0x6B, 0xC8, 0xC8, 0xC8, 0xC8,
				0x6B, 0x6B, 0x6B, 0x6B, 0xC8, 0xC8, 0xC8, 0xC8,
				0x6B, 0x6B, 0x6B, 0x6B, 0xC8, 0xC8, 0x6B, 0x6B,
				0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B,
				0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0xC8, 0xC8,
				0x6B, 0x6B, 0x6B, 0x6B, 0xC8, 0xC8, 0xC8, 0xC8,
				0x6B, 0x6B, 0x6B, 0x6B, 0xC8, 0xC8, 0xC8, 0xC8,
				0x19, 0x19, 0x19, 0x19, 0xC8, 0xC8, 0xC8, 0xC8,
				0x19, 0x19, 0x19, 0x19, 0xC8, 0xC8, 0xC8, 0xC8,
				0x19, 0x19, 0x19, 0x19, 0xC8, 0xC8, 0xC8, 0xC8,
				0x19, 0x19, 0x19, 0x19, 0xC8, 0xC8, 0xC8, 0xC8,
				0x19, 0x19, 0x19, 0x19, 0xC8, 0xC8, 0xC8, 0xC8,
				0x19, 0x19, 0x19, 0x19, 0xC8, 0xC8, 0xC8, 0xC8,
				0x19, 0x19, 0x19, 0x19, 0xC8, 0xC8, 0xC8, 0xC8,
				0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0xC8, 0xC8,
				0x19, 0x19, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8,
				0x19, 0x19, 0x19, 0x19, 0xC8, 0xC8, 0xC8, 0xC8

.text

# a0 = coordenada x
# a1 = coordenada y
renderStanding:
	addi a0, zero, 311
	addi a1, zero, 21
	la a2, standing # carrega o endereco da sprite standing
	addi a3, zero, 8  # w = 8
	addi a4, zero, 21 # h = 21
	
	call renderSprite
	addi a7, zero, 10
	ecall

# Essa funcao renderiza uma sprite na tela, dado endereco da sprite, largura, altura e coordenadas (x,y)
# a0 = coordenada x do bitmap display onde comeca a renderizacao
# a1 = coordenada y do bitmap display onde comeca a renderizacao
# a2 = endereco da sprite
# a3 = largura da sprite
# a4 = altura da sprite
renderSprite:
	li   t0, 0xFF000000  # carrega o endereco inicial do bitmap display
	addi t1, zero, 320   # largura do bitmap display
	mul  t2, t1, a1      # bmp display vezes coordenada y
	add  t0, t0, a0      # desloca a memoria em x bytes para a direita
	add  t0, t0, t2	     # desloca a memoria em y bytes para baixo

	mul t2, a3, a4   # nro de pixels = largura x altura
	add t3, zero, a3 # contador de largura = largura
	sub t1, t1, a3   # valor para pular para a proxima linha = 320 - largura
	addi t1, t1, 1  # valor da proxima linha+1
	
	
	loop_render: beq t2, zero, loop_render_end # while (nro de pixels > 0)
		lb t4, 0(a2) # carrega um pixel da sprite
		sb t4, 0(t0) # carrega o pixel no bitmap display
		
		addi a2, a2, 1           # proximo pixel
		addi t3, t3, -1          # decrementa o contador de largura
		beq  t3, zero, next_line # if contador de largura == 0
		
		addi t0, t0, 1     # desloca o endereco do bmp display em 1 byte
		jal zero, continue # prepara para o proximo loop
		next_line:
			add t3, zero, a3 # restaura o valor da largura
			add t0, t0, t1   # endereco do bmp display += 320+1 - largura
		continue:
			addi t2, t2, -1 # diminui o contador de pixels
			jal zero, loop_render
	loop_render_end:
	ret # retorna

	
	
	
	
	
	
	
	
	
	
