DEPTH = 4096;
WIDTH = 32;
ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;
CONTENT
BEGIN
00000000 : 00000413;   % 5: 	addi s0, zero, 0   # posicao x inicial do pitfall harry %
00000001 : 07d00493;   % 6: 	addi s1, zero, 125 # posicao y inicial do pitfall harry %
00000002 : 00000513;   % 8: 	addi a0, zero, 0     # x = 0 %
00000003 : 00000593;   % 9: 	addi a1, zero, 0     # y = 0 %
00000004 : 00000317;   % 10: 	call render_background %
00000005 : 0ac300e7;   % 10:  %
00000006 : 00000513;   % 12: 	addi a0, zero, 0     # x = 0 %
00000007 : 07d00593;   % 13: 	addi a1, zero, 125   # y = 0 %
00000008 : 00000317;   % 14: 	call render_standing %
00000009 : 114300e7;   % 14:  %
0000000a : 00000317;   % 16: loop_infinito:	call handle_keyboard_event %
0000000b : 018300e7;   % 16:  %
0000000c : 00000317;   % 17: 	call loop_infinito %
0000000d : ff8300e7;   % 17:  %
0000000e : 00a00893;   % 41: 	addi a7, zero, 10    # fim %
0000000f : 00000073;   % 42: 	ecall %
00000010 : ffc10113;   % 9: 	addi sp, sp, -4 %
00000011 : 00112023;   % 10: 	sw   ra, 0(sp) %
00000012 : ff2002b7;   % 12: 	li t0, 0xFF200000       # carrega o endereco de controle do KDMMIO %
00000013 : 00028293;   % 12:  %
00000014 : 0002a303;   % 13: 	lw t1, 0(t0)	        # le bit de Controle Teclado %
00000015 : 00137313;   % 14: 	andi t1, t1,0x0001      # mascara o bit menos significativo %
00000016 : 02030463;   % 15:    	beq t1, zero, continue  # se nao ha tecla pressionada entao vai para FIM %
00000017 : 0042a383;   % 17:    	lw t2, 4(t0) # carrega a tecla pressionada %
00000018 : 04a00e13;   % 19:    	addi t3, zero, 74     # se a tecla pressionada for J %
00000019 : 03c38463;   % 20:    	beq t2, t3, walk_left # anda para a esquerda %
0000001a : 06a00e13;   % 21:    	addi t3, zero, 106    # se a tecla pressionada for j %
0000001b : 03c38063;   % 22:    	beq t2, t3, walk_left # anda para a esquerda %
0000001c : 04c00e13;   % 24:    	addi t3, zero, 76      # se a tecla pressionada for L %
0000001d : 01c38c63;   % 25:    	beq t2, t3, walk_right # anda para a direita %
0000001e : 06c00e13;   % 26:    	addi t3, zero, 108     # se a tecla pressionada for l %
0000001f : 01c38863;   % 27:    	beq t2, t3, walk_left  # anda para a direita %
00000020 : 00012083;   % 32:     lw   ra, 0(sp)  # retorna %
00000021 : 00410113;   % 33:     addi sp, sp, 4 %
00000022 : 00008067;   % 34: 	ret %
00000023 : ffc10113;   % 39: 	addi sp, sp, -4 %
00000024 : 00112023;   % 40: 	sw   ra, 0(sp) %
00000025 : 00000317;   % 42: 	call restore_background %
00000026 : 058300e7;   % 42:  %
00000027 : 00140413;   % 43: 	addi s0, s0, 1 # anda 1 pixel para a direita %
00000028 : 00800533;   % 45: 	add a0, zero, s0 # x = s0 %
00000029 : 009005b3;   % 46: 	add a1, zero, s1 # y = s1 %
0000002a : 00000317;   % 47: 	call render_running1 %
0000002b : 0bc300e7;   % 47:  %
0000002c : 00012083;   % 49: 	lw   ra, 0(sp)  # retorna %
0000002d : 00410113;   % 50:     addi sp, sp, 4 %
0000002e : 00008067;   % 51: 	ret %
0000002f : ffc10113;   % 148: 	addi sp, sp, -4 # aloca 1 espaco na pilha %
00000030 : 00112023;   % 149: 	sw   ra, 0(sp)  # guarda o valor de ra na pilha %
00000031 : 0fc10617;   % 151: 	la   a2, background # carrega o endereco da sprite standing %
00000032 : 4e460613;   % 151:  %
00000033 : 14000693;   % 152: 	addi a3, zero, 320  # w = 320 %
00000034 : 0f000713;   % 153: 	addi a4, zero, 240  # h = 240 %
00000035 : 00000793;   % 154: 	addi a5, zero, 0    # renderizacao parcial = false  %
00000036 : 00000317;   % 155: 	call renderSprite %
00000037 : 17c300e7;   % 155:  %
00000038 : 00012083;   % 157: 	lw   ra, 0(sp) # restaura o valor de ra %
00000039 : 00410113;   % 158: 	addi sp, sp 4  # desaloca 1 espaco na pilha %
0000003a : 00008067;   % 160: 	ret %
0000003b : ffc10113;   % 164: 	addi sp, sp, -4 # aloca 1 espaco na pilha %
0000003c : 00112023;   % 165: 	sw   ra, 0(sp)  # guarda o valor de ra na pilha %
0000003d : 0fc10617;   % 167: 	la   a2, background # carrega o endereco do background %
0000003e : 4b460613;   % 167:  %
0000003f : 14000293;   % 168: 	addi t0, zero, 320  # largura background %
00000040 : 02928333;   % 169: 	mul  t1, t0, s1     # largura vezes y %
00000041 : 00660633;   % 170: 	add  a2, a2, t1     # desloca a memoria em (largura * posicao do pitfall harry) vezes %
00000042 : 00860633;   % 171: 	add  a2, a2, s0     # desloca o endereco de background em x %
00000043 : 00800533;   % 173: 	add  a0, zero, s0 # x = posicao x do pitfall harry %
00000044 : 009005b3;   % 174: 	add  a1, zero, s1 # y = posicao y do pitfall harry %
00000045 : 01000693;   % 175: 	addi a3, zero, 16 # largura = 16 (pior caso) %
00000046 : 01500713;   % 176: 	addi a4, zero, 21 # altura = 21 (pior caso) %
00000047 : 00100793;   % 177: 	addi a5, zero, 1  # renderizacao parcial = true %
00000048 : 00000317;   % 179: 	call renderSprite %
00000049 : 134300e7;   % 179:  %
0000004a : 00012083;   % 181: 	lw   ra, 0(sp) # restaura o valor de ra %
0000004b : 00410113;   % 182: 	addi sp, sp 4  # desaloca 1 espaco na pilha %
0000004c : 00008067;   % 184: 	ret %
0000004d : ffc10113;   % 189: 	addi sp, sp, -4 # aloca 1 espaco na pilha %
0000004e : 00112023;   % 190: 	sw   ra, 0(sp)  # guarda o valor de ra na pilha %
0000004f : 0fc10617;   % 192: 	la   a2, standing # carrega o endereco da sprite standing %
00000050 : ec860613;   % 192:  %
00000051 : 00800693;   % 193: 	addi a3, zero, 8  # w = 8 %
00000052 : 01500713;   % 194: 	addi a4, zero, 21 # h = 21 %
00000053 : 00000793;   % 195: 	addi a5, zero, 0    # renderizacao parcial = false %
00000054 : 00000317;   % 196: 	call renderSprite %
00000055 : 104300e7;   % 196:  %
00000056 : 00012083;   % 198: 	lw   ra, 0(sp) # restaura o valor de ra %
00000057 : 00410113;   % 199: 	addi sp, sp 4  # desaloca 1 espaco na pilha %
00000058 : 00008067;   % 201: 	ret %
00000059 : ffc10113;   % 206: 	addi sp, sp, -4 # aloca 1 espaco na pilha %
0000005a : 00112023;   % 207: 	sw   ra, 0(sp)  # guarda o valor de ra na pilha %
0000005b : 0fc10617;   % 209: 	la   a2, running1 # carrega o endereco da sprite running1 %
0000005c : f4060613;   % 209:  %
0000005d : 00e00693;   % 210: 	addi a3, zero, 14 # w = 14 %
0000005e : 01400713;   % 211: 	addi a4, zero, 20 # h = 20 %
0000005f : 00000793;   % 212: 	addi a5, zero, 0    # renderizacao parcial = false %
00000060 : 00000317;   % 213: 	call renderSprite %
00000061 : 0d4300e7;   % 213:  %
00000062 : 00012083;   % 215: 	lw   ra, 0(sp) # restaura o valor de ra %
00000063 : 00410113;   % 216: 	addi sp, sp 4  # desaloca 1 espaco na pilha %
00000064 : 00008067;   % 218: 	ret %
00000065 : ffc10113;   % 223: 	addi sp, sp, -4 # aloca 1 espaco na pilha %
00000066 : 00112023;   % 224: 	sw   ra, 0(sp)  # guarda o valor de ra na pilha %
00000067 : 0fc10617;   % 226: 	la   a2, running2 # carrega o endereco da sprite running2 %
00000068 : 02860613;   % 226:  %
00000069 : 00a00693;   % 227: 	addi a3, zero, 10 # w = 10 %
0000006a : 01500713;   % 228: 	addi a4, zero, 21 # h = 21 %
0000006b : 00000793;   % 229: 	addi a5, zero, 0    # renderizacao parcial = false	 %
0000006c : 00000317;   % 230: 	call renderSprite %
0000006d : 0a4300e7;   % 230:  %
0000006e : 00012083;   % 232: 	lw   ra, 0(sp) # restaura o valor de ra %
0000006f : 00410113;   % 233: 	addi sp, sp 4  # desaloca 1 espaco na pilha %
00000070 : 00008067;   % 235: 	ret %
00000071 : ffc10113;   % 240: 	addi sp, sp, -4 # aloca 1 espaco na pilha %
00000072 : 00112023;   % 241: 	sw   ra, 0(sp)  # guarda o valor de ra na pilha %
00000073 : 0fc10617;   % 243: 	la   a2, running3 # carrega o endereco da sprite running3 %
00000074 : 0ca60613;   % 243:  %
00000075 : 00a00693;   % 244: 	addi a3, zero, 10 # w = 10 %
00000076 : 01500713;   % 245: 	addi a4, zero, 21 # h = 21 %
00000077 : 00000793;   % 246: 	addi a5, zero, 0    # renderizacao parcial = false %
00000078 : 00000317;   % 247: 	call renderSprite %
00000079 : 074300e7;   % 247:  %
0000007a : 00012083;   % 249: 	lw   ra, 0(sp) # restaura o valor de ra %
0000007b : 00410113;   % 250: 	addi sp, sp 4  # desaloca 1 espaco na pilha %
0000007c : 00008067;   % 252: 	ret %
0000007d : ffc10113;   % 257: 	addi sp, sp, -4 # aloca 1 espaco na pilha %
0000007e : 00112023;   % 258: 	sw   ra, 0(sp)  # guarda o valor de ra na pilha %
0000007f : 0fc10617;   % 260: 	la   a2, running4 # carrega o endereco da sprite running4 %
00000080 : 16c60613;   % 260:  %
00000081 : 01000693;   % 261: 	addi a3, zero, 16 # w = 16 %
00000082 : 01400713;   % 262: 	addi a4, zero, 20 # h = 20 %
00000083 : 00000793;   % 263: 	addi a5, zero, 0    # renderizacao parcial = false %
00000084 : 00000317;   % 264: 	call renderSprite %
00000085 : 044300e7;   % 264:  %
00000086 : 00012083;   % 266: 	lw   ra, 0(sp) # restaura o valor de ra %
00000087 : 00410113;   % 267: 	addi sp, sp 4  # desaloca 1 espaco na pilha %
00000088 : 00008067;   % 269: 	ret %
00000089 : ffc10113;   % 274: 	addi sp, sp, -4 # aloca 1 espaco na pilha %
0000008a : 00112023;   % 275: 	sw   ra, 0(sp)  # guarda o valor de ra na pilha %
0000008b : 0fc10617;   % 277: 	la   a2, jump     # carrega o endereco da sprite jump %
0000008c : 27c60613;   % 277:  %
0000008d : 01000693;   % 278: 	addi a3, zero, 16 # w = 16 %
0000008e : 01000713;   % 279: 	addi a4, zero, 16 # h = 16 %
0000008f : 00000793;   % 280: 	addi a5, zero, 0    # renderizacao parcial = false %
00000090 : 00000317;   % 281: 	call renderSprite %
00000091 : 014300e7;   % 281:  %
00000092 : 00012083;   % 283: 	lw   ra, 0(sp) # restaura o valor de ra %
00000093 : 00410113;   % 284: 	addi sp, sp 4  # desaloca 1 espaco na pilha %
00000094 : 00008067;   % 286: 	ret %
00000095 : ff0002b7;   % 296: 	li   t0, 0xFF000000  # carrega o endereco inicial do bitmap display %
00000096 : 00028293;   % 296:  %
00000097 : 14000313;   % 297: 	addi t1, zero, 320   # largura do bitmap display %
00000098 : 02b303b3;   % 298: 	mul  t2, t1, a1      # bmp display vezes coordenada y %
00000099 : 00a282b3;   % 299: 	add  t0, t0, a0      # desloca a memoria em x bytes para a direita %
0000009a : 007282b3;   % 300: 	add  t0, t0, t2	     # desloca a memoria em y bytes para baixo %
0000009b : 02e683b3;   % 302: 	mul t2, a3, a4   # nro de pixels = largura x altura %
0000009c : 00d00e33;   % 303: 	add t3, zero, a3 # contador de largura = largura %
0000009d : 40d30333;   % 304: 	sub t1, t1, a3   # valor para pular para a proxima linha = 320 - largura %
0000009e : 00130313;   % 305: 	addi t1, t1, 1  # valor da proxima linha+1 %
0000009f : 04038063;   % 308: 	loop_render: beq t2, zero, loop_render_end # while (nro de pixels > 0) %
000000a0 : 00060e83;   % 309: 		lb t4, 0(a2) # carrega um pixel da sprite %
000000a1 : 01d28023;   % 310: 		sb t4, 0(t0) # carrega o pixel no bitmap display %
000000a2 : 00160613;   % 312: 		addi a2, a2, 1           # proximo pixel %
000000a3 : fffe0e13;   % 313: 		addi t3, t3, -1          # decrementa o contador de largura %
000000a4 : 000e0663;   % 314: 		beq  t3, zero, next_line # if contador de largura == 0 %
000000a5 : 00128293;   % 316: 		addi t0, t0, 1     # desloca o endereco do bmp display em 1 byte %
000000a6 : 01c0006f;   % 317: 		jal zero, continue # prepara para o proximo loop %
000000a7 : 00d00e33;   % 319: 			add t3, zero, a3 # restaura o valor da largura %
000000a8 : 006282b3;   % 320: 			add t0, t0, t1   # endereco do bmp display += 320+1 - largura %
000000a9 : 00079463;   % 321: 			bne a5, zero, partial_render %
000000aa : 00c0006f;   % 322: 			jal zero, continue %
000000ab : 00660633;   % 325: 				add a2, a2, t1 # alem de deslocar no bitmap display, desloca na memoria %
000000ac : fff60613;   % 326: 				addi a2, a2, -1 %
000000ad : fff38393;   % 329: 			addi t2, t2, -1 # diminui o contador de pixels %
000000ae : fc5ff06f;   % 330: 			jal zero, loop_render %
000000af : 00008067;   % 332: 	ret # retorna %
END;
